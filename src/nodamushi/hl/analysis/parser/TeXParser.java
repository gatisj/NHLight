package nodamushi.hl.analysis.parser;

import nodamushi.hl.analysis.Token;
import nodamushi.hl.analysis.TokenTypePreDefine;
import nodamushi.hl.analysis.parser.flex.TeXFlexParser;

public class TeXParser extends FlexParser{

    
    public TeXParser(){
        defaultIdentifierTokenType=MARKUP_COMMAND_TOKEN;
    }
    
    @Override
    public String language(){
        return "TeX";
    }

    @Override
    protected AutoGeneratedParser createParser(String source){
        return new TeXFlexParser(source);
    }
    
    @Override
    protected void appendParsedToken(Token t){
        switch(t.getType()){
//            case IDENTIFIER:
                
//                break;
            
            
                //数式モードについて何か処理しようかと思ったけど、
                //今のところはKEYWORD_TOKENにするだけ
            case TeXFlexParser.LINEMATH:
                t.setType(KEYWORD_MIDIUM_TOKEN);
                break;
            case TeXFlexParser.BEGINMATH:
                t.setType(KEYWORD_MIDIUM_TOKEN);
                break;
            case TeXFlexParser.ENDMATH:
                t.setType(KEYWORD_MIDIUM_TOKEN);
                break;
        }
        
        super.appendParsedToken(t);
    }
    
    
  //ダブルチェックロッキングパターンの代わり
    private static class T{
        final static String KeywordDefine;
        static{
            KeywordDefine = FlexParser.readPackageTextFile("texparser.txt");
        }
    }
    
    @Override
    protected String defaultKeywordDefine(){
        return T.KeywordDefine;
    }

}
