package nodamushi.hl.analysis.parser;

import static nodamushi.hl.analysis.parser.flex.HTMLFlexParser.*;

import java.util.ArrayList;
import java.util.List;

import nodamushi.hl.analysis.Token;
import nodamushi.hl.analysis.TokenTypePreDefine;
import nodamushi.hl.analysis.parser.flex.HTMLFlexParser;

public class HTMLParser extends FlexParser{

    @Override
    public String language(){
        return "html";
    }
    @Override
    protected AutoGeneratedParser createParser(String source){
        return new HTMLFlexParser(source);
    }

    @Override
    protected void postProcess(List<Token> tokens){
        ArrayList<Token> copy = new ArrayList<>();
        Token before=null;//markup declaration結合用
        String
        attributeName=null,
        scripttype = null;
        
        for(Token t:tokens){
            int type = t.getType();
            switch(type){
                
                //Scriptをjavascriptの場合はJavaScript Parserを使ってパースする
                //他のはText扱いでパースする。
                case SCRIPT_CONTENTS:
                    Parser parser;
                    
                    //script typeが指定されていない場合は
                    //html5の仕様に則りtext/javascriptとみなす。
                    if(scripttype==null || scripttype.contains("javascript"))
                        parser = new JavaScriptParser();
                    else //その他の場合はtextとして扱う
                        parser = new TextParser();

                    List<Token> ptokens = parser.parse(t.getString());
                    copy.addAll(ptokens);
                    
                    before = null;
                    
                    break;
                
                case ATTRIBUTE_VALUE_TOKEN://面倒くさいしStringでいいんじゃね？
                    t.setType(STRING_TOKEN);
                case STRING_TOKEN:
                    if("type".equals(attributeName)){
                        scripttype = t.getString();
                    }
                    before = t;
                    copy.add(t);
                    break;
                    
                case EQUAL_TOKEN:
                case COLON_TOKEN:
                    t.setType(PLAIN_TOKEN);
                    before = t;
                    copy.add(t);
                    break;
                
                case CLOSETAG_BEGIN_TOKEN:
                case CLOSETAG_END_TOKEN:
                case TAG_BEGIN_TOKEN:
                case TAG_END_TOKEN:
                case SINGLETAG_BEGIN_TOKEN:
                case SINGLETAG_END_TOKEN:
                    scripttype = null;
                    attributeName=null;
                    t.setType(MARKUP_TAG_TOKEN);
                    before = t;
                    copy.add(t);
                    break;
                    
                case ATTRIBUTE_NAME_TOKEN:
                    attributeName = t.getString();//script用に名前の保存
                    before = t;
                    copy.add(t);
                    break;
                    
                    
                    //<!は結合しない
                case MARKUP_DECLARATION_BEGIN_TOKEN:
                    t.setType(TokenTypePreDefine.MARKUP_DECLARATION_TOKEN);
                    before = t;
                    copy.add(t);
                    break;
                case MARKUP_DECLARATION_END_TOKEN:
                case HTMLFlexParser.MARKUP_DECLARATION_TOKEN:
                    t.setType(TokenTypePreDefine.MARKUP_DECLARATION_TOKEN);
                    if(
                         before!=null && 
                         before.getType()==TokenTypePreDefine.MARKUP_DECLARATION_TOKEN){
                        before.add(t);
                    }else{
                        before = t;
                        copy.add(t);
                    }
                    break;
                    
                
                default:
                    
                    before = t;
                    copy.add(t);
                    break;
                    
            }//end switch
        }//end for
        
        
        //Parserが保持するデータを書き換える。
        tokens.clear();
        tokens.addAll(copy);
    }

}
