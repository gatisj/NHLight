/* The following code was generated by JFlex 1.4.3 on 13/07/15 9:43 */

/* template ver 1.0 */
package nodamushi.hl.analysis.parser.flex;
import nodamushi.hl.analysis.Token;
import nodamushi.hl.analysis.parser.AutoGeneratedParser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/07/15 9:43 from the specification file
 * <tt>java.jflex</tt>
 */
public class JavaFlexParser implements AutoGeneratedParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENTS = 4;
  public static final int CHAR = 8;
  public static final int JAVADOC = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\13"+
    "\1\54\1\0\1\7\1\13\1\17\1\55\1\57\1\57\1\6\1\11"+
    "\1\4\1\12\1\52\1\5\12\50\1\4\1\45\1\14\1\16\1\15"+
    "\1\21\1\46\3\7\1\53\1\7\1\53\2\7\1\51\2\7\1\51"+
    "\16\7\1\57\1\60\1\57\1\13\1\7\1\0\1\40\1\37\1\33"+
    "\1\32\1\31\1\22\1\44\1\26\1\27\1\7\1\41\1\30\1\47"+
    "\1\34\1\23\2\7\1\24\1\42\1\35\1\36\1\7\1\25\1\7"+
    "\1\43\1\7\1\56\1\20\1\56\1\13\41\10\2\0\4\7\4\0"+
    "\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0"+
    "\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0"+
    "\1\7\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7"+
    "\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7"+
    "\1\0\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7"+
    "\11\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\10\0\33\7\5\0\3\7\15\0\4\10\7\0\1\7\4\0\13\10"+
    "\5\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10"+
    "\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0"+
    "\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10"+
    "\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7"+
    "\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10"+
    "\244\0\4\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10"+
    "\2\0\12\10\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7"+
    "\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0"+
    "\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0"+
    "\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0"+
    "\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0"+
    "\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0"+
    "\2\7\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10"+
    "\4\0\2\7\1\0\3\7\2\10\2\0\12\10\1\0\1\7\20\0"+
    "\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10"+
    "\16\0\12\10\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10"+
    "\2\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0"+
    "\12\10\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0"+
    "\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0"+
    "\1\10\10\0\2\7\2\10\2\0\12\10\12\0\6\7\2\0\2\10"+
    "\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7"+
    "\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10"+
    "\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10"+
    "\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7"+
    "\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7"+
    "\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\10\2\0\2\7"+
    "\42\0\1\7\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10"+
    "\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10\1\0"+
    "\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7\24\10"+
    "\1\7\12\10\6\0\6\7\4\10\4\7\3\10\1\7\3\10\2\7"+
    "\7\10\3\7\4\10\15\7\14\10\1\7\17\10\2\0\46\7\12\0"+
    "\53\7\1\0\1\7\3\0\u0149\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0"+
    "\71\7\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0"+
    "\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0"+
    "\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0"+
    "\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7"+
    "\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0\3\10"+
    "\2\0\12\10\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7"+
    "\12\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0"+
    "\5\7\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\10\46\0"+
    "\27\7\5\10\4\0\65\7\12\10\1\0\35\10\2\0\13\10\6\0"+
    "\12\10\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\10"+
    "\21\0\11\10\14\0\3\10\36\7\12\10\3\0\2\7\12\10\6\0"+
    "\46\7\16\10\14\0\44\7\24\10\10\0\12\10\3\0\3\7\12\10"+
    "\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7\1\10\15\0"+
    "\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0"+
    "\7\7\16\0\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0"+
    "\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0"+
    "\32\7\26\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0"+
    "\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0"+
    "\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0"+
    "\205\7\6\0\4\7\3\10\16\0\46\7\12\0\66\7\11\0\1\7"+
    "\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7"+
    "\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7"+
    "\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7"+
    "\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7\103\0\56\7\2\0\u010d\7"+
    "\3\0\20\7\12\10\2\7\24\0\57\7\1\10\14\0\2\10\1\0"+
    "\31\7\10\0\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7"+
    "\1\0\2\7\16\0\12\7\120\0\10\7\1\10\3\7\1\10\4\7"+
    "\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7"+
    "\21\10\13\0\12\10\6\0\22\10\6\7\3\0\1\7\4\0\12\10"+
    "\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7"+
    "\16\10\16\0\1\7\12\10\46\0\51\7\16\10\11\0\3\7\1\10"+
    "\10\7\2\10\2\0\12\10\6\0\27\7\3\0\1\7\1\10\4\0"+
    "\60\7\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10"+
    "\1\7\30\0\3\7\43\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0\76\7"+
    "\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7"+
    "\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7"+
    "\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7"+
    "\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10"+
    "\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7"+
    "\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\0\1\2\2\3\1\4\1\5\2\6"+
    "\1\7\7\6\12\7\1\10\1\2\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\1\2\17\1\20\2\1\2\21"+
    "\1\1\2\22\2\1\2\23\1\24\1\1\1\25\1\26"+
    "\1\6\4\7\1\27\4\7\1\27\11\7\1\30\2\11"+
    "\1\1\1\0\1\31\1\32\1\33\3\7\1\34\20\7"+
    "\1\34\1\35\15\7\1\36\6\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\365"+
    "\0\u0157\0\365\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\365\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\365\0\u052b"+
    "\0\u055c\0\u058d\0\365\0\365\0\365\0\365\0\u05be\0\u05ef"+
    "\0\365\0\365\0\u0620\0\u0651\0\u0682\0\365\0\u06b3\0\u06e4"+
    "\0\365\0\u0715\0\u0746\0\u0777\0\365\0\365\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u01ea\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\365\0\u0c0f"+
    "\0\365\0\u0c40\0\365\0\365\0\365\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u01ea\0\u01ea\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u01ea\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\6\1\16\1\17\1\14\1\20\1\21\1\14\1\22"+
    "\1\23\1\24\1\25\1\15\1\26\1\27\1\15\1\30"+
    "\1\31\1\32\1\33\1\34\3\15\1\35\2\15\1\36"+
    "\2\15\1\37\1\40\1\15\1\41\1\15\1\42\1\15"+
    "\1\43\1\44\1\45\1\46\1\6\1\47\1\50\1\51"+
    "\51\47\1\52\3\47\1\53\1\54\1\55\1\56\3\54"+
    "\1\57\53\54\1\60\1\61\3\54\1\62\52\54\1\63"+
    "\1\64\1\65\52\63\1\66\2\63\1\67\63\0\1\10"+
    "\61\0\1\11\62\0\1\70\1\71\7\0\1\24\60\0"+
    "\1\24\51\0\2\15\11\0\23\15\2\0\3\15\1\0"+
    "\1\15\16\0\1\24\4\0\1\24\54\0\1\24\3\0"+
    "\1\24\56\0\1\14\1\0\1\24\57\0\1\72\1\24"+
    "\60\0\1\24\1\14\57\0\1\24\1\0\1\14\47\0"+
    "\2\15\11\0\1\15\1\73\4\15\1\74\14\15\2\0"+
    "\3\15\1\0\1\15\14\0\2\15\11\0\7\15\1\75"+
    "\13\15\2\0\3\15\1\0\1\15\14\0\2\15\11\0"+
    "\4\15\1\76\16\15\2\0\3\15\1\0\1\15\14\0"+
    "\2\15\11\0\1\77\11\15\1\100\10\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\1\15\1\101\21\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\6\15"+
    "\1\102\3\15\1\103\10\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\1\15\1\104\5\15\1\105\13\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\1\15"+
    "\1\106\2\15\1\107\1\15\1\110\7\15\1\102\4\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\1\15"+
    "\1\111\1\112\16\15\1\113\1\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\3\15\1\114\1\115\16\15"+
    "\2\0\3\15\1\0\1\15\14\0\1\116\12\0\23\116"+
    "\2\0\1\116\1\0\1\116\1\0\1\116\34\0\2\117"+
    "\17\0\1\41\1\117\1\120\56\0\1\120\10\0\1\47"+
    "\2\0\51\47\1\0\3\47\3\0\1\51\132\0\1\121"+
    "\3\0\1\121\1\54\2\0\3\54\1\122\52\54\2\0"+
    "\1\56\56\0\1\54\2\0\2\54\1\123\1\122\52\54"+
    "\2\0\1\61\56\0\1\54\2\0\2\54\1\124\1\122"+
    "\52\54\1\63\2\0\52\63\1\0\3\63\2\0\1\65"+
    "\56\0\1\63\2\0\52\63\1\121\3\63\1\70\2\0"+
    "\56\70\6\0\1\125\67\0\1\14\1\24\51\0\2\15"+
    "\11\0\2\15\1\77\20\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\1\15\1\126\21\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\13\15\1\127\7\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\5\15"+
    "\1\130\15\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\13\15\1\131\7\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\12\15\1\132\10\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\20\15\1\133\2\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\14\15"+
    "\1\134\6\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\14\15\1\135\6\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\1\136\22\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\12\15\1\137\10\15\2\0"+
    "\3\15\1\0\1\15\14\0\2\15\11\0\16\15\1\140"+
    "\4\15\2\0\3\15\1\0\1\15\14\0\2\15\11\0"+
    "\16\15\1\141\4\15\2\0\3\15\1\0\1\15\14\0"+
    "\2\15\11\0\1\15\1\142\21\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\7\15\1\143\13\15\2\0"+
    "\3\15\1\0\1\15\14\0\2\15\11\0\13\15\1\144"+
    "\7\15\2\0\3\15\1\0\1\15\14\0\2\15\11\0"+
    "\5\15\1\145\15\15\2\0\3\15\1\0\1\15\14\0"+
    "\2\15\11\0\1\15\1\146\21\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\116\11\0\23\116\2\0\3\116\1\0"+
    "\1\116\27\0\1\117\7\0\1\117\15\0\1\120\2\0"+
    "\1\117\5\0\1\54\2\0\2\54\1\0\1\122\52\54"+
    "\7\0\2\15\11\0\16\15\1\147\4\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\14\15\1\150\6\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\6\15"+
    "\1\133\14\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\7\15\1\151\13\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\22\15\1\152\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\7\15\1\77\13\15\2\0"+
    "\3\15\1\0\1\15\14\0\2\15\11\0\23\15\2\0"+
    "\1\153\2\15\1\0\1\15\14\0\2\15\11\0\15\15"+
    "\1\154\5\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\16\15\1\155\4\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\13\15\1\156\7\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\2\15\1\152\20\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\20\15"+
    "\1\157\2\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\6\15\1\160\14\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\16\15\1\161\4\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\7\15\1\152\13\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\13\15"+
    "\1\162\7\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\2\15\1\147\20\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\13\15\1\152\7\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\2\15\1\163\20\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\2\15"+
    "\1\164\20\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\6\15\1\144\14\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\14\15\1\165\6\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\5\15\1\166\15\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\20\15"+
    "\1\153\2\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\7\15\1\167\13\15\2\0\3\15\1\0\1\15"+
    "\14\0\2\15\11\0\17\15\1\77\3\15\2\0\3\15"+
    "\1\0\1\15\14\0\2\15\11\0\11\15\1\170\11\15"+
    "\2\0\3\15\1\0\1\15\14\0\2\15\11\0\12\15"+
    "\1\171\10\15\2\0\3\15\1\0\1\15\14\0\2\15"+
    "\11\0\1\172\22\15\2\0\3\15\1\0\1\15\14\0"+
    "\2\15\11\0\6\15\1\173\14\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\12\15\1\174\10\15\2\0"+
    "\3\15\1\0\1\15\14\0\2\15\11\0\16\15\1\175"+
    "\4\15\2\0\3\15\1\0\1\15\14\0\2\15\11\0"+
    "\4\15\1\77\16\15\2\0\3\15\1\0\1\15\14\0"+
    "\2\15\11\0\16\15\1\176\4\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\13\15\1\77\7\15\2\0"+
    "\3\15\1\0\1\15\14\0\2\15\11\0\14\15\1\133"+
    "\6\15\2\0\3\15\1\0\1\15\14\0\2\15\11\0"+
    "\12\15\1\152\10\15\2\0\3\15\1\0\1\15\14\0"+
    "\2\15\11\0\11\15\1\177\11\15\2\0\3\15\1\0"+
    "\1\15\14\0\2\15\11\0\7\15\1\153\13\15\2\0"+
    "\3\15\1\0\1\15\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\11\1\1\11\12\1\1\11\3\1\4\11\2\1\2\11"+
    "\3\1\1\11\2\1\1\11\3\1\2\11\30\1\1\11"+
    "\1\1\1\11\1\0\3\11\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public JavaFlexParser(String str){
    this(new java.io.StringReader(str));
    this.originalSource = str;
  }

  private String originalSource;

  private java.util.ArrayList<Token> tokens = new java.util.ArrayList<>();

  @Override
  public java.util.Collection<Token> parse(){
    tokens.clear();
    try{
        _parse();
    }catch(Exception e){e.printStackTrace();}
    return tokens;
  }


  private void push(Token t){
    if(t!=null)
      tokens.add(t);
  }
  private Token token(int type){
    return token(type,yychar,yylength());
  }

  private Token token(int type,int xchar,int length){
    return new Token(type,xchar,length,yyline,originalSource);
  }
  

  private int tokenStartPosition=0;
  private int tokenLength=0;
  private boolean nowLong=false;

  private void longTokenInit(){
    tokenStartPosition = yychar;
    tokenLength=0;
    nowLong=true;
  }

  private void longTokenInit_by_NewLine(){
    tokenStartPosition = yychar+yylength();
    tokenLength=0;
    nowLong=true;
  }
  
  private void addLongToken(){
    tokenLength += yylength();
  }
  
  private Token longToken(int type){
    nowLong=false;
    if(tokenLength==0)return null;
    return token(type,tokenStartPosition,tokenLength);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaFlexParser(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaFlexParser(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void _parse() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { yybegin(YYINITIAL);addLongToken();push(longToken(CHARSTRING_TOKEN));return;
          }
        case 31: break;
        case 11: 
          { longTokenInit();addLongToken();yybegin(STRING);
          }
        case 32: break;
        case 12: 
          { longTokenInit();addLongToken();yybegin(CHAR);
          }
        case 33: break;
        case 9: 
          { push(token(NUMBER_TOKEN));return;
          }
        case 34: break;
        case 1: 
          { addLongToken();
          }
        case 35: break;
        case 2: 
          { System.err.println("token error:char("+yychar+") string: "+yytext());yybegin(YYINITIAL);push(token(UNKNOWN));return;
          }
        case 36: break;
        case 4: 
          { push(token(SPACE_TOKEN));return;
          }
        case 37: break;
        case 30: 
          { push(token(RETURN_TOKEN));return;
          }
        case 38: break;
        case 15: 
          { push(longToken(STRING_TOKEN));
    push(token(NEWLINE_TOKEN));
    longTokenInit_by_NewLine();
    return;
          }
        case 39: break;
        case 28: 
          { push(token(TYPE_TOKEN));return;
          }
        case 40: break;
        case 7: 
          { push(token(IDENTIFIER));return;
          }
        case 41: break;
        case 8: 
          { push(token(EOS_TOKEN));return;
          }
        case 42: break;
        case 17: 
          { push(longToken(COMMENT_TOKEN));
    push(token(NEWLINE_TOKEN));
    longTokenInit_by_NewLine();
    return;
          }
        case 43: break;
        case 10: 
          { push(token(ACCESS_TOKEN));return;
          }
        case 44: break;
        case 21: 
          { push(token(COMMENT_TOKEN));return;
          }
        case 45: break;
        case 25: 
          { yybegin(YYINITIAL);addLongToken();push(longToken(COMMENT_TOKEN));return;
          }
        case 46: break;
        case 29: 
          { push(token(DEFINE_TOKEN));return;
          }
        case 47: break;
        case 26: 
          { yybegin(YYINITIAL);addLongToken();push(longToken(JAVADOC_TOKEN));return;
          }
        case 48: break;
        case 6: 
          { push(token(OPERATOR_TOKEN));return;
          }
        case 49: break;
        case 16: 
          { yybegin(YYINITIAL);addLongToken();push(longToken(STRING_TOKEN));return;
          }
        case 50: break;
        case 3: 
          { push(token(NEWLINE_TOKEN));return;
          }
        case 51: break;
        case 22: 
          { longTokenInit();addLongToken();yybegin(COMMENTS);
          }
        case 52: break;
        case 13: 
          { push(token(BLOCK_TOKEN));return;
          }
        case 53: break;
        case 14: 
          { push(token(PARENTHESIS_TOKEN));return;
          }
        case 54: break;
        case 18: 
          { push(longToken(JAVADOC_TOKEN));
    push(token(NEWLINE_TOKEN));
    longTokenInit_by_NewLine();
    return;
          }
        case 55: break;
        case 23: 
          { push(token(BRANCH_TOKEN));return;
          }
        case 56: break;
        case 19: 
          { push(longToken(CHARSTRING_TOKEN));
    push(token(NEWLINE_TOKEN));
    longTokenInit_by_NewLine();
    return;
          }
        case 57: break;
        case 5: 
          { push(token(PLAIN_TOKEN));return;
          }
        case 58: break;
        case 27: 
          { longTokenInit();addLongToken();yybegin(JAVADOC);
          }
        case 59: break;
        case 24: 
          { push(token(ANNOTATION_TOKEN));return;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   if(nowLong){
    switch(yystate()){
    case STRING:
      push(longToken(STRING_TOKEN));
      break;
    case COMMENTS:
      push(longToken(COMMENT_TOKEN));
      break;
    case JAVADOC:
      push(longToken(JAVADOC_TOKEN));
      break;
    }
  }
  return;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
