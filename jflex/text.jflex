/* template ver 1.1.0 */
package nodamushi.hl.analysis.parser.flex;
import nodamushi.hl.analysis.Token;
import nodamushi.hl.analysis.parser.AutoGeneratedParser;


%%

/* write this class name! */
%class TextFlexParser
%implements AutoGeneratedParser
%unicode
%char
%line
%function _parse
%type void
%public


%{
  /* write this class name! this method is a constructor */
  public TextFlexParser(String str){
    this(new java.io.StringReader(str));
    this.originalSource = str;
  }

  private String originalSource;

  private java.util.ArrayList<Token> tokens = new java.util.ArrayList<>();

  @Override
  public java.util.Collection<Token> parse(){
    tokens.clear();
    try{
        _parse();
    }catch(Exception e){e.printStackTrace();}
    return tokens;
  }


  private void push(Token t){
    if(t!=null)
      tokens.add(t);
  }
  private Token token(int type){
    return token(type,yychar,yylength());
  }

  private Token token(int type,int xchar,int length){
    return new Token(type,xchar,length,yyline,originalSource);
  }
  
%}


%eofval{
  return;
%eofval}

LineTerminator =\r|\n|\r\n



%%


<YYINITIAL>{

  {LineTerminator}	{push(token(NEWLINE_TOKEN));return;}


  [^\r\n]+		{push(token(TEXT));return;}
}
