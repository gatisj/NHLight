/* template ver 1.1.0 */
package nodamushi.hl.html;
import nodamushi.hl.analysis.Token;
import nodamushi.hl.analysis.parser.AutoGeneratedParser;

%%

/* write this class name! */
%class HTMLTemplateFlexParser
%implements AutoGeneratedParser
%unicode
%char
%line
%function _parse
%type void



%{
  /* write this class name! this method is a constructor */
  public static final int
    FOREACHSCRIPT_TOKEN=-100,
    SINGLESCRIPT_TOKEN=-101,
    GLOBALSCRIPT_TOKEN=-103;
  private int scripttype;
  
  public HTMLTemplateFlexParser(String str){
    this(new java.io.StringReader(str));
    this.originalSource = str;
  }

  private String originalSource;

  private java.util.ArrayList<Token> tokens = new java.util.ArrayList<>();

  @Override
  public java.util.Collection<Token> parse(){
    tokens.clear();
    try{
        _parse();
    }catch(Exception e){e.printStackTrace();}
    return tokens;
  }


  private void push(Token t){
    if(t!=null)
      tokens.add(t);
  }
  private Token token(int type){
    return token(type,yychar,yylength());
  }

  private Token token(int type,int xchar,int length){
    return new Token(type,xchar,length,yyline,originalSource);
  }
  
  /*
    use this method when token's end position can't be find at one iteration
  */
  private int tokenStartPosition=0;
  private int tokenLength=0;
  private boolean nowLong=false;

  private void longTokenInit(){
    tokenStartPosition = yychar;
    tokenLength=0;
    nowLong=true;
  }

  private void longTokenInit_by_NewLine(){
    tokenStartPosition = yychar+yylength();
    tokenLength=0;
    nowLong=true;
  }
  
  private void addLongToken(){
    tokenLength += yylength();
  }
  
  private Token longToken(int type){
    nowLong=false;
    if(tokenLength==0)return token(PLAIN_TOKEN);
    return token(type,tokenStartPosition,tokenLength);
  }


%}


%eofval{
  if(nowLong){
    switch(yystate()){
    case STRINGs:
    case STRINGd:
      push(longToken(TEXT));
      break;
    case SSTRINGd:
    case SSTRINGs:
      push(longToken(scripttype));
      break;
    }
  }
  return;
%eofval}

LineTerminator =\r|\n|\r\n
InputCharacter =[^\r\n]
WhiteSpace = [ \t\f]+

%state STRINGs
%state STRINGd
%state SSTRINGs
%state SSTRINGd
%state SCRIPT
%state COMMENT

%%


<YYINITIAL>{
  "<?foreachline"	{
    yybegin(SCRIPT);longTokenInit_by_NewLine();
    scripttype=    FOREACHSCRIPT_TOKEN;
    push(token(1));
    return;
  }
  
  "<?script"		{
    scripttype=    SINGLESCRIPT_TOKEN;
    yybegin(SCRIPT);longTokenInit_by_NewLine();
    push(token(1));
    return;
  }  

  "<?gscript"		{
    scripttype=    GLOBALSCRIPT_TOKEN;
    yybegin(SCRIPT);longTokenInit_by_NewLine();
    push(token(1));
    return;
  }

  "<?comment"		{
      yybegin(COMMENT);push(token(COMMENT_TOKEN));return;}

  \"		{longTokenInit();addLongToken();yybegin(STRINGd);}
  \'		{longTokenInit();addLongToken();yybegin(STRINGs);}
  
  [^ \n\r\\<]+		{push(token(TEXT));return;}
    
  "\\"{LineTerminator}		{push(token(PLAIN_TOKEN));return;}

  {LineTerminator}		{push(token(TEXT));return;}
  
  \\|"<"|" "			{push(token(TEXT));return;}
}


<STRINGd>{
    \\\\		{addLongToken();}
    \\\"|[^\"\\]+	{addLongToken();}
    \\		{addLongToken();}
    \"		{yybegin(YYINITIAL);addLongToken();push(longToken(TEXT));return;}
}
<STRINGs>{
    \\\\		{addLongToken();}
    \\\'|[^\'\\]+	{addLongToken();}
    \\		{addLongToken();}
    \'		{yybegin(YYINITIAL);addLongToken();push(longToken(TEXT));return;}
}

<COMMENT>{
    [^?]+	{push(token(COMMENT_TOKEN));}

    "?>"	{yybegin(YYINITIAL);push(token(COMMENT_TOKEN));return;}
    "?"		{push(token(COMMENT_TOKEN));return;}
}

<SCRIPT>{

    [^\"\'?\\]+	{push(token(scripttype));return;}
    
    \"		{longTokenInit();addLongToken();yybegin(SSTRINGd);}
    \'		{longTokenInit();addLongToken();yybegin(SSTRINGs);}

    "?>"		{
      yybegin(YYINITIAL);push(token(PLAIN_TOKEN));return;}
    
    .		{push(token(scripttype));return;}
}

<SSTRINGd>{
    \\\\		{addLongToken();}
    \\\"|[^\"\\]+	{addLongToken();}
    \\		{addLongToken();}

    
  \"		{yybegin(SCRIPT);addLongToken();push(longToken(scripttype));return;}

}
<SSTRINGs>{
    \\\\		{addLongToken();}
    \\\'|[^\'\\]+	{addLongToken();}
    \\		{addLongToken();}

  \'		{yybegin(SCRIPT);addLongToken();push(longToken(scripttype));return;}
}




/* error fallback */
  .|\n                             {
    System.err.println("jflex parser  error: state "+yystate()+";\n    char("+yychar
      +") line("+yyline+") string: "+yytext());yybegin(YYINITIAL);push(token(UNKNOWN));return; }

